name: Cron Update CI

on:
  schedule:
    - cron: '5 0 * * *'

jobs:
  amd64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set Enviroment Variables
      id: variables
      env:
        GIT_USER: hydazz
        GIT_REPO: docker-radarr
        GIT_BRANCH: main
        DOCKERHUB_IMAGE: vcxpz/radarr
        DOCKERIMAGE_TAG: latest
        RADARR_BRANCH: nightly
      run: |
        echo "::set-output name=GIT_USER::$GIT_USER"
        echo "::set-output name=GIT_REPO::$GIT_REPO"
        echo "::set-output name=GIT_BRANCH::$GIT_BRANCH"
        echo "::set-output name=DOCKERHUB_IMAGE::$DOCKERHUB_IMAGE"
        echo "::set-output name=DOCKERIMAGE_TAG::$DOCKERIMAGE_TAG"
        echo "::set-output name=VERSION::$(curl -sX GET "https://api.github.com/repos/linuxserver/$GIT_REPO/releases/latest" | jq -r .tag_name)"
        echo "::set-output name=RADARR_RELEASE::$(curl -sL "https://radarr.servarr.com/v1/update/${RADARR_BRANCH}/changes?os=linuxmusl" | jq -r '.[0].version')"
        echo "::set-output name=RADARR_BRANCH::$RADARR_BRANCH"

    - name: Docker Login
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u vcxpz --password-stdin

    - name: Github Login
      env:
        GIT_USER: ${{ steps.variables.outputs.GIT_USER }}
      run: |
        git config --global user.email "alexanderhyde@icloud.com"
        git config --global user.name "$GIT_USER"

    - name: Build The Docker Image
      env:
        VERSION: ${{ steps.variables.outputs.VERSION }}
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
        RADARR_RELEASE: ${{ steps.variables.outputs.RADARR_RELEASE }}
        RADARR_BRANCH: ${{ steps.variables.outputs.RADARR_BRANCH }}
      run: |
        docker build --no-cache --pull . --file Dockerfile --build-arg RADARR_BRANCH="$RADARR_BRANCH" --build-arg RADARR_RELEASE="$RADARR_RELEASE" --build-arg VERSION="$VERSION" --build-arg BUILD_DATE="$(date +%Y-%m-%d)" --tag "$DOCKERHUB_IMAGE":cibuild

    - name: Get New Package Versions From Image
      id: packages
      env:
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
      run: |
        echo "::set-output name=OLD_MD5::$(md5sum package_versions.txt | awk '{ print $1 }')"
        docker run --rm --entrypoint '/bin/sh' -v "$PWD":/tmp "$DOCKERHUB_IMAGE":cibuild -c '\
          apk info -v | sort >/tmp/package_versions.txt'
        echo "::set-output name=NEW_MD5::$(md5sum package_versions.txt | awk '{ print $1 }')"
        echo "::set-output name=OLD_RADARR_RELEASE::$(cat version_info.json | jq -r .radarr_release)"

    - name: Update README.md
      id: readme
      env:
        RADARR_RELEASE: ${{ steps.variables.outputs.RADARR_RELEASE }}
      run: |
        echo "::set-output name=OLD_MD5::$(md5sum README.md | awk '{ print $1 }')"
        OVERLAY_VERSION=$(curl -sX GET "https://raw.githubusercontent.com/hydazz/docker-baseimage-alpine/main/version_info.json" | jq -r .overlay_version)
        OLD_OVERLAY_VERSION=$(cat version_info.json | jq -r .overlay_version)
        OLD_RADARR_RELEASE=$(cat version_info.json | jq -r .radarr_release)
        sed -i \
          -e "s/${OLD_OVERLAY_VERSION}/${OVERLAY_VERSION}/g" \
          -e "s/${OLD_RADARR_RELEASE}/${RADARR_RELEASE}/g" \
          README.md
        printf '{\n"overlay_version": "'${OVERLAY_VERSION}'",\n"radarr_release": "'${RADARR_RELEASE}'"\n}' >version_info.json
        echo "::set-output name=NEW_MD5::$(md5sum README.md | awk '{ print $1 }')"

    - name: Commit And Push Changes To Github
      if: steps.variables.outputs.RADARR_RELEASE != steps.packages.outputs.OLD_RADARR_RELEASE
      env:
        GIT_USER: ${{ steps.variables.outputs.GIT_USER }}
        GIT_REPO: ${{ steps.variables.outputs.GIT_REPO }}
        GIT_BRANCH: ${{ steps.variables.outputs.GIT_BRANCH }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git add -A
        git commit -m 'Bot Updating Files'
        git push https://"$GIT_USER":"$GITHUB_TOKEN"@github.com/"$GIT_USER"/"$GIT_REPO".git $GIT_BRANCH

    - name: Tag And Push Docker Image
      if: steps.variables.outputs.RADARR_RELEASE != steps.packages.outputs.OLD_RADARR_RELEASE
      env:
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
        DOCKERIMAGE_TAG: ${{ steps.variables.outputs.DOCKERIMAGE_TAG }}
      run: |
        docker tag "$DOCKERHUB_IMAGE":cibuild "$DOCKERHUB_IMAGE":"$DOCKERIMAGE_TAG"
        docker push "$DOCKERHUB_IMAGE":"$DOCKERIMAGE_TAG"

    - name: Push README.md To Docker Hub
      uses: peter-evans/dockerhub-description@v2
      with:
        username: vcxpz
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
